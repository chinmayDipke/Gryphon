/* Searching Prime number based on the Time Complexity
* 	
* Time Complexity = O(n^2)
* 
* 
* 
* */

package DSA;



import java.util.*;

class First{
	
	public boolean prime(int num) {
		int c = 2;
		while(c < num)
		{
			if(num%c == 0)
			{
				return false;
			}
			c++;
		}
		return true;
	}
}

class Second{
	
	public boolean prime(int num) {
		int c = 2;
		while(c*c <= num)
		{
			if(num%c == 0)
			{
				return false;
			}
			c++;
		}
		return true;
	}
}

public class BasicPrimeNumber {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int n = sc.nextInt();
		for(int i = 2;i <= n; i++) {
			int cnt = 0;
			for(int j = 2;j <= i; j++) {
				
				if(i%j == 0) {
					cnt++;
				}
				
			}
			if(cnt == 1) {
				System.out.println(i);
			}
		}
		
	}

}
