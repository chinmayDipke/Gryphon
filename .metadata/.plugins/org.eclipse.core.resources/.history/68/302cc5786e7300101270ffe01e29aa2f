/* Searching Prime number based on the Time Complexity
* 	
* Time Complexity = O(n^2)
* 
* 
* 
* */

package DSA;



import java.util.*;

class First{
	
	public boolean prime(int num) {
		int c = 2;
		while(c < num)
		{
			if(num%c == 0)
			{
				return false;
			}
			c++;
		}
		return true;
	}
}

class Second{
	
	public boolean prime(int num) {
		int c = 2;
		while(c*c <= num)
		{
			if(num%c == 0)
			{
				return false;
			}
			c++;
		}
		return true;
	}
}

class Third {
	
	public void third() {
		
	}
}

public class BasicPrimeNumber {

	public static void main(String[] args) {
	
		int n = 40;
		for(int i = 2;i <= Math.sqrt(n); i++) {
			
			if(n == 2) 
			{
				System.out.println(n);
				
			}
			else if(n == 3) {
				System.out.println(2);
			}
			else {
				System.out.println("No negative");
			}
			
			for(int j = 2;j*j <= i; j++) 
			{
				if(i % 2 != 0 || i % 3 != 0)
				{
					System.out.println(i);
				}
				
				
			}
		}
	
		
	}

}
